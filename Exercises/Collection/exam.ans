\begin{savedanswer}{1}
% \begin{ansnote}
The difficulty is in ensuring that processes calculate values in a suitable
order.
%\end{ansnote}

\begin{parts}
\part
The solution below arranges for each worker $j$, for $j < N-1$, to signal on
the channel \SCALA{flag(j+1)} to worker $j+1$ after writing each value; the
$i$th such signal (counting from~0) indicates that $a(i)(j)$ has been written.
Worker~$j+1$ will calculate the next value only after receiving this signal.
We use buffered channels for efficiency.
%
\begin{scala}
object Recurrence1{
  val N = 10
  val a = new Array[Array[Int]](N,N)

  val flag = Array.fill(N)(OneOneBuf[Unit](1))  // indexed by recipients

  def f(m:Int, n:Int) = m+n  // for testing

  def worker(j:Int) = proc("Worker"+j){
    a(0)(j) = j
    for(i <- 1 until N){
      if(j < N-1) flag(j+1)!() // signal to j+1
      if(j > 0){
        flag(j)?() // wait for signal
        a(i)(j) = f(a(i-1)(j-1) , a(i-1)(j))
      }
      else a(i)(j) = a(i-1)(j) // j = 0 doesn't need to wait
    }
  }

  def main(args: Array[String]) = {
    run(|| (for(j <- 0 until N) yield worker(j)))
    for(j <- 0 until N) println(a(N-1)(j))
  }
}
\end{scala}

%%%%%

\part

In order to ensure that values are calculated in a suitable order, the
controller has an array of booleans indicating which values have been
calculated; tasks are added to its queue when the necessary prior tasks have
been completed.
%
\begin{scala}
object Recurrence2{
  val N = 10
  val a = new Array[Array[Int]](N,N)

  type Task = (Int,Int)
  // the task (i,j) tells the worker to calculate a(i)(j)

  val toWorkers = OneMany[Task] // channel for distributing tasks
  val done = ManyOne[Task] // channel to tell controller that task is done
  def f(m:Int, n:Int) = m+n // for testing

  def worker = proc{
    repeat{
      val(i,j) = toWorkers?()
      if(i == 0) a(i)(j) = j
      else if (j > 0) a(i)(j) = f(a(i-1)(j-1) , a(i-1)(j))
      else a(i)(j) = a(i-1)(j)
      done!(i,j)
    }
  }

  def controller = proc{
    val b = Array.fill[Boolean](N,N) // indicates which values are done; initialised to all false
    // queue stores the tasks that are ready to be done
    val queue = new scala.collection.mutable.Queue[Task]
    for(j <- 0 until N) queue += (0,j)
    var busyWorkers = 0 // number of busy workers

    // Main loop
    serve(
      (queue.nonEmpty && toWorkers) =!=> { busyWorkers += 1; queue.dequeue }
      |
      (busyWorkers > 0 && done) =?=> { case (i,j) =>
        b(i)(j) = true; busyWorkers -= 1
        // add tasks to queue if possible
        if(i < N-1){
          if(j == 0 || b(i)(j-1))
            // (i,j-1) and (i,j) done, so can do task (i+1,j)
            queue += (i+1,j)
          if(j < N-1 && b(i)(j+1))
            // (i,j) and (i,j+1) done so can do task (i+1,j+1)
            queue += (i+1,j+1)
        }
      }
    )
    // Loop terminates when queue.isEmpty && busyWorkers = 0

    toWorkers.close
  }

  def main(args: Array[String]) = {
    val p = 4 // number of workers
    val workers = || (for(j <- 0 until p) yield worker)
    run(workers || controller)
    for(j <- 0 until N) println(a(N-1)(j))
  }
}
\end{scala}
\end{parts}
\end{savedanswer}
\begin{savedanswer}{2}

\begin{parts}
\part
Node~0 sends a \SCALA{Req} request message to each of its neighbours.  The
first time that a node receives a message, it accepts the sender of the
message as its parent, and sends a \SCALA{Req} message on to all of its other
neighbours.

Here's a complete program, although only about the first half is required.
%
\begin{scala}
object SpanningTree0{

  val N = 10 // number of nodes
  type NodeId = Int // identities of nodes

  abstract class Msg
  case class Req(n: NodeId) extends Msg
    // suggestion from potential parent n

  val toNode = Array.fill(N)(OneOneBuf[Msg](N-1)) // channels to each node

  def node(me: Int, neighbours: List[NodeId]) = proc{
    var parent = 0

    if(me != 0){ // Wait to receive notification from parent
      toNode(me)?() match{ case Req(p) => parent = p }
    }
    println("Node "+me+" chooses parent "+parent)

    // Send out request to potential children
    for(n <- neighbours; if n != parent){ toNode(n)!Req(me) }

    // There's no real need to consume other requests here
  }

  /** Generate neighbours randomly. */
  val allNeighbours = new Array[List[NodeId]](N)
  def generateNeighbours = {
    // Generate links randomly
    val links = new Array[Array[Boolean]](N,N)
    for(i <- 0 until N; j <- i+1 until N){
      if(scala.util.Random.nextDouble < 0.5){
        links(i)(j) = true; links(j)(i) = true
      }
    }
    // Now build lists of neighbours
    for(i <- 0 until N){
      allNeighbours(i) = List[NodeId]()
      for(j <- 0 until N) if (i != j && links(i)(j)) allNeighbours(i) ::= j
    }
  }

  def main(args:Array[String]) = {
    generateNeighbours
    for(i <- 0 until N) println("neighbours("+i+") = "+allNeighbours(i))
    run( || (for (i <- 0 until N) yield node(i, allNeighbours(i))) )
  }
}
\end{scala}

%%%%%

\part
When a node first receives a \SCALA{Req} message, it sends \SCALA{Req}
messages to each of its neighbours in turn, waiting for a response from each
before sending to the next; it then sends a response back to its parent.  Each
\SCALA{Req} message is responded to with a \SCALA{Resp} message, than
indicates whether the sender of the \SCALA{Resp} has accepted the sender of
the \SCALA{Req} as its parent.  Note that a node needs to reply to subsequent
\SCALA{Req} messages negatively, until it has sent a \SCALA{Resp} to each of
its neighbours.

\begin{scala}
  abstract class Msg
  case class Req(n: NodeId) extends Msg
    // suggestion from potential parent n
  case class Resp(n: NodeId, ok: Boolean) extends Msg
    // response, either positive or negative, from node n

  val toNode = Array.fill(ManyOne[Msg]) // channels to each node

  def Node(me:Int, neighbours:List[NodeId]) = proc{
    var parent = 0

    if(me != 0){ // Wait to receive notification from parent
      toNode(me)?() match{ case Req(p) => parent = p }
    }
    println("Node "+me+" chooses parent "+parent)

    var children = List[NodeId]()
    var reqs = if(me == 0) 0 else 1 // number of requests so far

    // Send out requests to potential children, and wait for reply
    for(n <- neighbours; if n != parent){
      toNode(n)!Req(me)
      var done = false
      while(!done){
        toNode(me)? match{
          case Req(n1) =>  // refuse new invitations
            reqs += 1; toNode(n1)!Resp(me, false)
          case Resp(n1,b) =>
            assert(n1 == n); done = true // received response
            if(b) children ::= n  // add to list of children if positive response
        } // end of match
      } // end of while
    } // end of for

    println("Node "+me+" has children "+children)

    if(me != 0) toNode(parent)!Resp(me,true) // send agreement to parent

    // Consume outstanding requests
    val len = neighbours.length-children.length // # expected reqs
    while(reqs < len){
      toNode(me)? match{
        case Req(n1) =>  // refuse new invitations
          reqs += 1; toNode(n1)!Resp(me, false)
      }
    }
  }
\end{scala}
%
Most students will fail to consume outstanding \SCALA{Req} messages at the
end, which will normally lead to deadlock [3 marks for this bit].

%%%%%

\part
The protocol proceeds in rounds, with the $n$th round exploring the graph to a
depth of~$n$.  The first time a node receives a \SCALA{Req}, it just sends
back a response, accepting its parent.  The next time it receives a
\SCALA{Req}, it sends a \SCALA{Req} on to all its other neighbours, to find if
they will be its children.  In order to achieve termination, the responses
back up the tree have to include a field indicating whether the search has
bottomed-out.  Perhaps the easiest way to implement this is for the root node
to detect when all branches have bottomed out, and to send a final
``terminate'' signal down the tree.  [A better way is for a node whose
  sub-tree has bottomed-out to terminate, and for its parent to not
  subsequently send it messages; with this approach, nodes also need to avoid
  sending messages to neighbours from whom they've previously received
  invitations that they've rejected (in case those nodes have terminated).]

%% Code isn't required, but here it is, anyway.
%% %
%% \begin{scala}
%%   abstract class Msg;
%%   case class Req(n:NodeId) extends Msg;
%%     // suggestion from potential parent n
%%   case class Resp(n:NodeId, ok:Boolean, done:Boolean) extends Msg;
%%     // response from node n; ok will signify acceptance or rejection of
%%     // invitation; done will indicate whether this sub-tree has
%%     // bottomed-out.

%%   val toNode = ManyOne[Msg](N); // channels to each node

%%   def Node(me:Int, neighbours:List[NodeId]) = proc{
%%     var children : List[NodeId] = Nil;
%%     var done = false;
%%     var childDone = new Array[Boolean](N); // is each child finished?

%%     if(me==0){
%%       // send initial request to children; should get back positive responses
%%       for(n <- neighbours; if !childDone(n)){
%%         toNode(n)!Req(me);
%%         toNode(me)? match{
%%           case Resp(n1,b,d) => { assert(n1==n && b && !d); children ::= n; }
%%         } // end of match
%%       } // end of for
%%       println("Node "+me+" has children "+children);

%%       // Now continue to send out commands to explore graph one level deeper
%%       while(!done){
%%         done = true; // have all neighbours signalled willingness to terminate?
%%         for(n <- neighbours; if !childDone(n)){
%%           toNode(n)!Req(me);
%%           toNode(me)? match{
%%             case Resp(n1,b,d) => {
%%               assert(n1==n && b); done &&= d; childDone(n) = d;
%%             }
%%             case Req(n1) => Resp(me,false,true);
%%           } // end of match
%%         } // end of for
%%       } // end of while
%%     } // end of if(me==0)

%%     else {
%%       var parent = 0;
%%       toNode(me)? match{ case Req(p) => { parent = p; } }
%%       toNode(parent)!Resp(me,true,false);
%%       println("Node "+me+" chooses parent "+parent);

%%       var firstRound = true; // is this the first round of pooling children
%%       // repeatedly receive requests to explore graph one level deeper
%%       while(!done){
%%         toNode(me)? match{
%%           case Req(from) => {
%%             if(from==parent){
%%               done = true;
%%               // pass on to all neighbours
%%               for(n <- neighbours; if n!=parent && !childDone(n)){
%%                 toNode(n)!Req(me);
%%                 // wait for reply
%%                 var replyRecd = false
%%                 while(!replyRecd){
%%                   toNode(me)? match{
%%                     case Req(n1) => { // refuse new invitations
%%                       toNode(n1)!Resp(me,false,true);
%%                       childDone(from) = true; // never invite this node
%%                     }
%%                     case Resp(n1,b,d) => { // reply received
%%                       assert(n1==n); done &&= d; replyRecd = true;
%%                       if(firstRound && b){ children ::= n; assert(!d); }
%%                       childDone(n) = d;
%%                     }
%%                   } // end of match
%%                 } // end of while(!replyRecd)
%%               } // end of for
%%               toNode(parent)!Resp(me, true, done);
%%               if(firstRound){
%%                 println("Node "+me+" has children "+children);
%%                 firstRound = false;
%%               }
%%             } // end of if(from==parent)
%%             else{
%%               toNode(from)!Resp(me,false,true); // refuse new invitations
%%               childDone(from) = true; // never invite this node
%%             }
%%           } // end of case Req(from)
%%         } // end of match
%%       } // end of while(!done)
%%     } // end of else
%%   }
%% \end{scala}
\end{parts}
\end{savedanswer}
\begin{savedanswer}{3}

Note: students are expected to elide about 45\% of the code below.

\begin{parts}
\part
Each call to an \SCALA{Arrive} procedure causes a reply channel to be sent to
the server.  The server sends a reply on this channel when the car should
proceed.
%
\begin{scala}
class BridgeServer{
  private type ReplyChan = OneOne[Unit]
  // channels to server
  private val arriveNorth,  arriveSouth = ManyOne[ReplyChan]
  private val leaveSouth, leaveNorth = ManyOne[Unit]

  def arriveNorth = {
    val c = OneOne[Unit]
    arriveNorth!c // register with server
    c?() // wait for acknowledgement to proceed
  }

  def leaveSouth = {
    leaveSouth!() // tell server we're done
  }

  def arriveSouth = {
    val c = OneOne[Unit]
    arriveSouth!c // register with server
    c?() // wait for acknowledgement to proceed
  }

  def leaveNorth = {
    leaveNorth!() // tell server we're done
  }

  private def server = proc{
    // Queues of ReplyChans for waiting cars
    val northQueue = new scala.collection.mutable.Queue[ReplyChan]
    val southQueue = new scala.collection.mutable.Queue[ReplyChan]
    var fromNorth = 0; var fromSouth = 0 // number on bridge
    // Invariant: fromNorth=0 or fromSouth=0

    serve(
      arriveNorth =?=> { c =>
        if(fromSouth > 0 || southQueue.nonEmpty) // need to wait
          northQueue += c
        else{ fromNorth += 1; c!() } // can go
      }
      |
      arriveSouth =?=> { c =>
        if(fromNorth > 0 || northQueue.nonEmpty) // need to wait
          southQueue += c
        else{ fromSouth += 1; c!() } // can go
      }
      |
      leaveSouth =?=> { () =>
        fromNorth -= 1
        if(fromNorth == 0) // release cars queuing from south
          while(southQueue.nonEmpty){ southQueue.dequeue!(); fromSouth += 1 }
      }
      |
      leaveNorth =?=> { () =>
        fromSouth -= 1
        if(fromSouth == 0) // release cars queuing from south
          while(northQueue.nonEmpty){ northQueue.dequeue!(); fromNorth += 1 }
      }
    ) // end of serve
  }

  server.fork // fork off server process
}
\end{scala}

%%%%%

\part
Here's a version using a JVM monitor.
%
\begin{scala}
class BridgeMonitor{
  private val mon = new Monitor
  // Conditions for signalling that the route from south, resp. north, is clear.
  private val southClear, northClear = mon.newCondition

  private var fromNorth = 0; private var fromSouth = 0 // number on bridge
  private var waitingNorth = 0; private var waitingSouth = 0// numbers waiting

  def arriveNorth = monitor.withLock{
    if(fromSouth > 0 || waitingSouth > 0){ // need to wait
      waitingNorth+=1
      northClear.await
      assert(fromSouth == 0)
      waitingNorth-=1
    }
    // proceed
    fromNorth += 1
  }

  def arriveSouth = monitor.withLock{
    if(fromNorth > 0 || waitingNorth > 0){ // need to wait
      waitingSouth+=1
      southClear.await
      assert(fromNorth == 0)
      waitingSouth-=1
    }
    // proceed
    fromSorth += 1
  }

  def leaveSouth = monitor.withLock{
    fromNorth -= 1
    if(fromNorth == 0 && waitingSouth > 0) southClear.signalAll()
  }

  def leaveNorth = monitor.withLock{
    fromSouth -= 1
    if(fromSouth == 0 && waitingNorth > 0) northClear.signalAll()
  }
}
\end{scala}
%
Note that once a waiting car~$c$ receives a signal, no car will enter from the
other direction until (at least) $c$ has left the bridge.


%% \begin{scala}
%% class BridgeMonitor{

%%   private var fromNorth = 0; private var fromSouth = 0; // number on bridge
%%   private var waitingNorth = 0; private var waitingSouth = 0;// numbers waiting
%%   private val NORTH = 0; private val SOUTH = 1; private val ANY = -1;
%%   private var direction = ANY; // current direction of flow

%%   def ArriveNorth = synchronized{
%%     if(direction==NORTH || waitingSouth>0){ // need to wait
%%       waitingNorth+=1;
%%       wait; while(direction==NORTH) wait;
%%       waitingNorth-=1;
%%     }
%%     // proceed
%%     fromNorth+=1; direction = SOUTH;
%%   }

%%   def ArriveSouth = synchronized{
%%     if(direction==SOUTH || waitingNorth>0){ // need to wait
%%       waitingSouth+=1;
%%       wait; while(direction==SOUTH) wait;
%%       waitingSouth-=1;
%%     }
%%     // proceed
%%     fromSouth+=1; direction = NORTH;
%%   }

%%   def LeaveSouth = synchronized{
%%     fromNorth-=1;
%%     if(fromNorth==0){
%%       if(waitingSouth>0){  // wake up waiting processes
%%         direction = NORTH; notifyAll;
%%       }
%%       else direction = ANY;
%%     }
%%   }

%%   def LeaveNorth = synchronized{
%%     fromSouth-=1;
%%     if(fromSouth==0){
%%       if(waitingNorth>0){  // wake up waiting processes
%%         direction = SOUTH; notifyAll;
%%       }
%%       else direction = ANY;
%%     }
%%   }
%% }
%% \end{scala}

%% Note: the code needs to be careful to avoid waking up cars going in the wrong
%% direction.

%%%%%

\part
\begin{scala}
class BridgeSemaphore{

  private var fromNorth = 0; private var fromSouth = 0 // number on bridge
  private var waitingNorth = 0; private var waitingSouth = 0// numbers waiting
  private val mutex = MutexSemaphore() // for mutual exclusion
  // Semaphores to signal to cars waiting at each end
  private val north = SignallingSemaphore()
  private val south = SignallingSemaphore()

  def arriveNorth = {
    mutex.down
    if(fromSouth > 0 || waitingSouth > 0){ // need to wait
      waitingNorth += 1; mutex.up; north.down // wait for signal
      waitingNorth -= 1
    }
    fromNorth+=1
    signalNorth // maybe signal to next car at this end
  }

  // Signal to cars waiting in the north, if any
  private def signalNorth = if(waitingNorth > 0) north.up else mutex.up

  def arriveSouth = {
    mutex.down
    if(fromNorth > 0 || waitingNorth > 0){ // need to wait
      waitingSouth += 1; mutex.up; south.down // wait for signal
      waitingSouth -= 1
    }
    fromSouth+=1
    signalSouth
  }

  // Signal to cars waiting in the south, if any
  private def signalSouth = if(waitingSouth > 0) south.up else mutex.up

  def leaveSouth = {
    mutex.down
    fromNorth -= 1
    if(fromNorth == 0) signalSouth else mutex.up
  }

  def leaveNorth = {
    mutex.down
    fromSouth -= 1
    if(fromSouth == 0) signalNorth else mutex.up
  }
}
\end{scala}
\end{parts}
\end{savedanswer}
